services:
  # Base de données MySQL
  mysql:
    image: mysql:8.0
    container_name: prestashop-mysql
    restart: unless-stopped
    labels:
      - "service=mysql"
      - "tier=database"
      - "monitoring=enabled"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - prestashop-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Application PrestaShop
  prestashop:
    build: ./prestashop
    container_name: prestashop-app
    restart: unless-stopped
    ports:
      - "8080:80"
    labels:
      - "service=prestashop"
      - "tier=application"
      - "monitoring=enabled"
    environment:
      DB_SERVER: mysql
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWD: ${MYSQL_PASSWORD}
      ADMIN_MAIL: ${PRESTASHOP_ADMIN_EMAIL}
      ADMIN_PASSWD: ${PRESTASHOP_ADMIN_PASSWORD}
      PS_INSTALL_AUTO: ${PS_INSTALL_AUTO}
      PS_DOMAIN: ${PS_DOMAIN}
      PS_THEME: ${PS_THEME}
      PS_FOLDER_ADMIN: ${PS_FOLDER_ADMIN}
      PS_FOLDER_INSTALL: ${PS_FOLDER_INSTALL}
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - prestashop_data:/var/www/html
    networks:
      - prestashop-network

  # phpMyAdmin pour gérer MySQL
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: prestashop-phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - prestashop-network

# Prometheus - Collecte des métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: prestashop-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - prestashop-network

  # Alertmanager - Gestion des alertes
  alertmanager:
    image: prom/alertmanager:latest
    container_name: prestashop-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - prestashop-network

  # Grafana - Dashboard custom
  grafana:
    image: grafana/grafana:latest
    container_name: prestashop-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - prestashop-network

  # cAdvisor - Monitoring des conteneurs
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: prestashop-cadvisor
    restart: unless-stopped
    ports:
      - "8082:8080"
    command:
      - '--docker_only=true'
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--store_container_labels=true'
      - '--whitelisted_container_labels=service,tier,monitoring,com.docker.compose.service'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - prestashop-network

  # Node Exporter - Monitoring de l'hôte
  node-exporter:
    image: prom/node-exporter:latest
    container_name: prestashop-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - prestashop-network

volumes:
  mysql_data:
    driver: local
  prestashop_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
  grafana_data:
    driver: local

networks:
  prestashop-network:
    driver: bridge